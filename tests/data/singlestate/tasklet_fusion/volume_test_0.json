{"_subgraph":{"0":12,"1":13,"2":14},"expr_index":0,"sdfg_id":0,"state_id":0,"transformation":"TaskletFusion","type":"PatternTransformation","docstring":"\n    Fuses two connected Tasklets.\n\n    The transformation always fuses the second Tasklet (`t2`) to the first one (`t1`), removing any AccessNode (`data`)\n    that may be between the two and is not used anywhere else.\n\n    In the following examples, the pre- and post-transformation subgraphs are described with the following syntax:\n    - Tasklets <name: inputs, ouputs, code>\n    - Edges <name: src, src_conn, dst, dst_conn, memlet>\n\n    Names and memlets in [square brackets] are not part of the subgraph.\n\n    Example 1:\n    Pre-transformation Subgraph\n    `t1: {'__in1', '__in2'}, {'__out'}, \"__out = __in1 + __in2\"`\n    `t2: {'__in1', '__in2'}, {'__out'}, \"__out = __in1 * __in2\"`\n    `e1: [s1], [sc1], t1, '__in1', [m1]`\n    `e2: [s2], [sc2], t1, '__in2', [m2]`\n    `e3: t1, '__out', t2, '__in1', Memlet()`\n    `e4: [s3], [sc3], t2, '__in2', [m3]`\n    `e5: t2, '__out', [d1], [dc1], [m4]`\n    Post-transformation Subgraph\n    ```\n    t1: {'__in1', '__in2', '__in3'}, {'__out_0'},\n        \"__out = __in1 + __in2\n__out_0 = __out * __in3\"\n    ```\n    `e1: [s1], [sc1], t1, '__in1', [m1]`\n    `e2: [s2], [sc2], t1, '__in2', [m2]`\n    `e4: [s3], [sc3], t1, '__in3', [m3]`\n    `e5: t1, '__out_0', [d1], [dc1], [m4]`\n\n    Example 2:\n    Pre-transformation Subgraph\n    ```\n    t1: {'__in1', '__in2'}, {'__out', __out1},\n        \"__out = __in1 + __in2\n__out1 = __out\"\n    ```\n    `t2: {'__in1', '__in2'}, {'__out'}, \"__out = __in1 * __in2\"`\n    `t3: {'__in1', '__in2'}, {'__out'}, \"__out = __in1 - __in2\"`\n    `e1: [s1], [sc1], t1, '__in1', [m1]`\n    `e2: [s2], [sc2], t1, '__in2', [m2]`\n    `e3: t1, '__out', t2, '__in1', Memlet()`\n    `e4: t1, '__out1', t3, '__in1', Memlet()`\n    `e5: [s3], [sc3], t2, '__in2', [m3]`\n    `e6: [s4], [sc4], t3, '__in2', [m4]`\n    `e7: t3, '__out', [d1], [dc1], [m5]`\n    Post-first-transformation Subgraph\n    ```\n    t1: {'__in1', '__in2', '__in3'}, {'__out1', '__out_0'},\n        \"__out = __in1 + __in2\n__out1 = __out\n__out_0 = __out * __in3\"\n    ```\n    `t3: {'__in1', '__in2'}, {'__out'}, \"__out = __in1 - __in2\"`\n    `e1: [s1], [sc1], t1, '__in1', [m1]`\n    `e2: [s2], [sc2], t1, '__in2', [m2]`\n    `e4: t1, '__out1', t3, '__in1', Memlet()`\n    `e5: [s3], [sc3], t1, '__in3', [m3]`\n    `e6: [s4], [sc4], t3, '__in2', [m4]`\n    `e7: t3, '__out', [d1], [dc1], [m5]`\n    Post-second-transformation Sugraph (`t3` fused to `t1`)\n    ```\n    t1: {'__in1', '__in2', '__in3', '__in4'}, {'__out_1'},\n        \"__out = __in1 + __in2\n__out1 = __out\n__out_0 = __out * __in3\n\"\n        \"__out_1 = __out1 - __in4\"\n    ```\n    `e1: [s1], [sc1], t1, '__in1', [m1]`\n    `e2: [s2], [sc2], t1, '__in2', [m2]`\n    `e5: [s3], [sc3], t1, '__in3', [m3]`\n    `e6: [s4], [sc4], t1, '__in4', [m4]`\n    `e7: t1, '__out_1', [d1], [dc1], [m5]`\n    "}